#!/usr/bin/env python3
"""
Script de test des composants individuels de l'application
Teste chaque fonction de calcul s√©par√©ment
"""

import sys
import os
sys.path.append('backend')

def test_calculations():
    """Test des fonctions de calcul"""
    print("üîç Test des fonctions de calcul...")
    
    try:
        from simulations.calculations import (
            calculer_somme, provision, montecarlo, bootstrap,
            estimation, clean, calculate_risk_metrics
        )
        
        # Test calculer_somme
        print("  ‚úÖ Import des fonctions r√©ussi")
        
        # Cr√©er des donn√©es de test
        import pandas as pd
        import numpy as np
        
        # Donn√©es de test
        lending_data = {
            'ref_date': ['2024-01-01', '2024-01-02', '2024-01-03'],
            'interval': [1, 2, 3],
            'SDATE': ['2024-01-01', '2024-01-02', '2024-01-03'],
            'INTERVAL': [1, 2, 3],
            '50': [5, 3, 2],
            '100': [3, 4, 5],
            '500': [2, 1, 3],
            '1000': [1, 2, 1]
        }
        
        recovery_data = {
            'ref_date': ['2024-01-01', '2024-01-02', '2024-01-03'],
            'interval': [1, 2, 3],
            'SDATE': ['2024-01-01', '2024-01-02', '2024-01-03'],
            'INTERVAL': [1, 2, 3],
            '50': [2, 1, 1],
            '100': [1, 2, 3],
            '500': [1, 0, 1],
            '1000': [0, 1, 0]
        }
        
        lending_df = pd.DataFrame(lending_data)
        recovery_df = pd.DataFrame(recovery_data)
        
        print("  ‚úÖ Cr√©ation des DataFrames de test")
        
        # Test calculer_somme
        try:
            sommes_lending = calculer_somme(lending_df)
            sommes_recovery = calculer_somme(recovery_df)
            print(f"  ‚úÖ calculer_somme - Lending: {sommes_lending}")
            print(f"  ‚úÖ calculer_somme - Recovery: {sommes_recovery}")
        except Exception as e:
            print(f"  ‚ùå calculer_somme √©chou√©: {e}")
            return False
        
        # Test provision
        try:
            prov, cumulative = provision(lending_df, recovery_df)
            print(f"  ‚úÖ provision - Provision: {prov}")
            print(f"  ‚úÖ provision - Cumulative: {cumulative}")
        except Exception as e:
            print(f"  ‚ùå provision √©chou√©: {e}")
            return False
        
        # Test montecarlo
        try:
            mc_result = montecarlo(lending_df)
            print(f"  ‚úÖ montecarlo - Shape: {mc_result.shape}")
        except Exception as e:
            print(f"  ‚ùå montecarlo √©chou√©: {e}")
            return False
        
        # Test bootstrap
        try:
            bs_result = bootstrap(lending_df)
            print(f"  ‚úÖ bootstrap - Shape: {bs_result.shape}")
        except Exception as e:
            print(f"  ‚ùå bootstrap √©chou√©: {e}")
            return False
        
        # Test estimation
        try:
            est_result = estimation(lending_df, recovery_df, N=10, method="montecarlo")
            print(f"  ‚úÖ estimation - M√©thode: {est_result['method']}")
            print(f"  ‚úÖ estimation - √âchantillons: {est_result['num_samples']}")
        except Exception as e:
            print(f"  ‚ùå estimation √©chou√©: {e}")
            return False
        
        # Test clean
        try:
            test_data = [1, 2, 3, 4, 5, 100, 200, 300, 400, 500]
            cleaned = clean(test_data)
            print(f"  ‚úÖ clean - Donn√©es nettoy√©es: {len(cleaned)} √©l√©ments")
        except Exception as e:
            print(f"  ‚ùå clean √©chou√©: {e}")
            return False
        
        # Test calculate_risk_metrics
        try:
            test_provisions = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]
            percentiles, confidence_interval = calculate_risk_metrics(test_provisions, 0.95)
            print(f"  ‚úÖ calculate_risk_metrics - Percentiles: {len(percentiles)}")
            print(f"  ‚úÖ calculate_risk_metrics - IC: {confidence_interval}")
        except Exception as e:
            print(f"  ‚ùå calculate_risk_metrics √©chou√©: {e}")
            return False
        
        print("  ‚úÖ Toutes les fonctions de calcul fonctionnent correctement")
        return True
        
    except ImportError as e:
        print(f"  ‚ùå Import √©chou√©: {e}")
        return False
    except Exception as e:
        print(f"  ‚ùå Erreur g√©n√©rale: {e}")
        return False

def test_models():
    """Test des mod√®les Django"""
    print("\nüîç Test des mod√®les Django...")
    
    try:
        # V√©rifier que Django est configur√©
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'appli_nana.settings')
        import django
        django.setup()
        
        from simulations.models import Simulation
        from django.contrib.auth.models import User
        
        print("  ‚úÖ Django configur√© et mod√®les import√©s")
        
        # Test cr√©ation d'utilisateur
        try:
            user, created = User.objects.get_or_create(
                username='testuser_models',
                defaults={
                    'email': 'test@example.com',
                    'first_name': 'Test',
                    'last_name': 'User'
                }
            )
            if created:
                user.set_password('testpass123')
                user.save()
            print(f"  ‚úÖ Utilisateur cr√©√©/r√©cup√©r√©: {user.username}")
        except Exception as e:
            print(f"  ‚ùå Cr√©ation utilisateur √©chou√©e: {e}")
            return False
        
        # Test cr√©ation simulation
        try:
            simulation = Simulation.objects.create(
                user=user,
                method='montecarlo',
                num_samples=100,
                alpha=0.95
            )
            print(f"  ‚úÖ Simulation cr√©√©e: ID {simulation.id}")
            
            # Test des m√©thodes du mod√®le
            simulation.set_simulated_provisions_list([100, 200, 300])
            provisions = simulation.get_simulated_provisions_list()
            print(f"  ‚úÖ M√©thodes du mod√®le: {len(provisions)} provisions")
            
            # Nettoyer
            simulation.delete()
            print("  ‚úÖ Simulation supprim√©e")
            
        except Exception as e:
            print(f"  ‚ùå Cr√©ation simulation √©chou√©e: {e}")
            return False
        
        print("  ‚úÖ Tous les mod√®les fonctionnent correctement")
        return True
        
    except Exception as e:
        print(f"  ‚ùå Erreur lors du test des mod√®les: {e}")
        return False

def test_serializers():
    """Test des s√©rialiseurs"""
    print("\nüîç Test des s√©rialiseurs...")
    
    try:
        from simulations.serializers import (
            SimulationSerializer, SimulationCreateSerializer,
            RiskCalculationSerializer
        )
        
        print("  ‚úÖ Import des s√©rialiseurs r√©ussi")
        
        # Test SimulationCreateSerializer
        try:
            data = {
                'method': 'montecarlo',
                'num_samples': 100,
                'alpha': 0.95
            }
            serializer = SimulationCreateSerializer(data=data)
            if serializer.is_valid():
                print("  ‚úÖ SimulationCreateSerializer validation r√©ussie")
            else:
                print(f"  ‚ùå SimulationCreateSerializer validation √©chou√©e: {serializer.errors}")
                return False
        except Exception as e:
            print(f"  ‚ùå Test SimulationCreateSerializer √©chou√©: {e}")
            return False
        
        # Test RiskCalculationSerializer
        try:
            risk_data = {
                'calculation_type': 'risk_to_provision',
                'risk_level': 5.0
            }
            serializer = RiskCalculationSerializer(data=risk_data)
            if serializer.is_valid():
                print("  ‚úÖ RiskCalculationSerializer validation r√©ussie")
            else:
                print(f"  ‚ùå RiskCalculationSerializer validation √©chou√©e: {serializer.errors}")
                return False
        except Exception as e:
            print(f"  ‚ùå Test RiskCalculationSerializer √©chou√©: {e}")
            return False
        
        print("  ‚úÖ Tous les s√©rialiseurs fonctionnent correctement")
        return True
        
    except Exception as e:
        print(f"  ‚ùå Erreur lors du test des s√©rialiseurs: {e}")
        return False

def main():
    """Fonction principale de test des composants"""
    print("üöÄ TEST DES COMPOSANTS INDIVIDUELS")
    print("=" * 50)
    
    tests = [
        ("Fonctions de calcul", test_calculations),
        ("Mod√®les Django", test_models),
        ("S√©rialiseurs", test_serializers)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüìã Test: {test_name}")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"  üí• Erreur fatale: {e}")
            results.append((test_name, False))
    
    # R√©sum√©
    print("\n" + "=" * 50)
    print("üìä R√âSUM√â DES TESTS")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS√â" if result else "‚ùå √âCHOU√â"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ R√©sultat: {passed}/{total} tests pass√©s")
    
    if passed == total:
        print("üéâ TOUS LES COMPOSANTS FONCTIONNENT PARFAITEMENT !")
        return True
    else:
        print("‚ö†Ô∏è  Certains composants ont des probl√®mes")
        return False

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Tests interrompus par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\n\nüí• Erreur fatale: {e}")
        sys.exit(1)


