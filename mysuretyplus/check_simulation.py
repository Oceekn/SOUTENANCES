#!/usr/bin/env python3
"""
Script pour v√©rifier l'√©tat de la simulation dans la base de donn√©es
"""

import sys
import os
import django
import json

# Configuration Django
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'appli_nana.settings')
django.setup()

from simulations.models import Simulation

def check_simulation(simulation_id):
    """V√©rifier l'√©tat d'une simulation sp√©cifique"""
    print(f"üîç V√©rification de la simulation {simulation_id}")
    print("=" * 50)
    
    try:
        simulation = Simulation.objects.get(id=simulation_id)
        
        print(f"‚úÖ Simulation trouv√©e:")
        print(f"   ID: {simulation.id}")
        print(f"   M√©thode: {simulation.method}")
        print(f"   √âchantillons: {simulation.num_samples}")
        print(f"   Alpha: {simulation.alpha}")
        print(f"   Status: {simulation.status}")
        print(f"   Cr√©√©e le: {simulation.created_at}")
        print(f"   Termin√©e le: {simulation.completed_at}")
        
        # V√©rifier les fichiers
        print(f"\nüìÅ Fichiers:")
        print(f"   Lending file: {simulation.lending_file.name if simulation.lending_file else 'Aucun'}")
        print(f"   Recovery file: {simulation.recovery_file.name if simulation.recovery_file else 'Aucun'}")
        
        # V√©rifier les donn√©es
        print(f"\nüìä Donn√©es:")
        print(f"   Provision r√©elle: {simulation.real_provision}")
        
        # V√©rifier les provisions simul√©es
        simulated_provisions = simulation.get_simulated_provisions_list()
        print(f"   Provisions simul√©es: {len(simulated_provisions)} valeurs")
        if simulated_provisions:
            print(f"   Exemples: {simulated_provisions[:5]}")
        
        # V√©rifier les percentiles
        percentiles = simulation.get_percentiles_dict()
        print(f"   Percentiles: {len(percentiles)} cl√©s")
        if percentiles:
            print(f"   Exemples: {dict(list(percentiles.items())[:3])}")
        
        # V√©rifier l'intervalle de confiance
        confidence_interval = simulation.get_confidence_interval_dict()
        print(f"   Intervalle de confiance: {len(confidence_interval)} cl√©s")
        if confidence_interval:
            print(f"   Valeurs: {confidence_interval}")
        
        # V√©rifier la trajectoire r√©elle
        real_cumulative = simulation.get_real_cumulative_list()
        print(f"   Trajectoire r√©elle: {len(real_cumulative)} points")
        if real_cumulative:
            print(f"   Exemples: {real_cumulative[:5]}")
        
        # V√©rifier les DataFrames
        print(f"\nüìà DataFrames:")
        lending_df = simulation.get_lending_dataframe()
        recovery_df = simulation.get_recovery_dataframe()
        
        if lending_df is not None:
            print(f"   Lending DataFrame: {lending_df.shape}")
            print(f"   Colonnes: {list(lending_df.columns)}")
        else:
            print(f"   Lending DataFrame: None")
            
        if recovery_df is not None:
            print(f"   Recovery DataFrame: {recovery_df.shape}")
            print(f"   Colonnes: {list(recovery_df.columns)}")
        else:
            print(f"   Recovery DataFrame: None")
        
        return True
        
    except Simulation.DoesNotExist:
        print(f"‚ùå Simulation {simulation_id} non trouv√©e")
        return False
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
        return False

def list_all_simulations():
    """Lister toutes les simulations"""
    print("üìã Liste de toutes les simulations:")
    print("=" * 50)
    
    simulations = Simulation.objects.all().order_by('-created_at')
    
    if not simulations:
        print("‚ùå Aucune simulation trouv√©e")
        return
    
    for sim in simulations:
        print(f"   ID: {sim.id} | M√©thode: {sim.method} | Status: {sim.status} | Cr√©√©e: {sim.created_at}")

if __name__ == "__main__":
    print("üöÄ V√©rification des simulations dans la base de donn√©es")
    print()
    
    # Lister toutes les simulations
    list_all_simulations()
    print()
    
    # Demander l'ID de la simulation √† v√©rifier
    try:
        simulation_id = input("Entrez l'ID de la simulation √† v√©rifier (ou appuyez sur Entr√©e pour la plus r√©cente): ").strip()
        
        if not simulation_id:
            # Prendre la simulation la plus r√©cente
            latest_simulation = Simulation.objects.all().order_by('-created_at').first()
            if latest_simulation:
                simulation_id = latest_simulation.id
                print(f"V√©rification de la simulation la plus r√©cente: {simulation_id}")
            else:
                print("‚ùå Aucune simulation trouv√©e")
                exit(1)
        
        check_simulation(int(simulation_id))
        
    except KeyboardInterrupt:
        print("\nüëã Arr√™t demand√© par l'utilisateur")
    except ValueError:
        print("‚ùå ID invalide")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")

