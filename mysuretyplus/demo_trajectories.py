#!/usr/bin/env python3
"""
Script de d√©monstration du trac√© des trajectoires des montants cumul√©s
"""

import sys
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Ajouter le chemin du backend
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

# Importer les fonctions de calcul
from simulations.calculations import (
    load_and_preprocess_data,
    calculate_cash_flow,
    generate_simulations_avance,
    generate_trajectory_plot,
    plot_transaction_trajectories
)

def create_realistic_data():
    """Cr√©e des donn√©es r√©alistes pour la d√©monstration"""
    print("üîß Cr√©ation de donn√©es r√©alistes...")
    
    # G√©n√©rer des dates sur 3 mois
    dates = pd.date_range('2023-01-01', '2023-03-31', freq='D')
    
    # Donn√©es de lending (emprunts)
    lending_data = {
        'ref_date': dates.strftime('%Y-%m-%d').tolist(),
        'INTERVAL': [1] * len(dates),
        '50': np.random.poisson(5, len(dates)),
        '100': np.random.poisson(3, len(dates)),
        '200': np.random.poisson(2, len(dates)),
        '500': np.random.poisson(1, len(dates)),
        '1000': np.random.poisson(0.5, len(dates))
    }
    
    # Donn√©es de recovery (remboursements) - g√©n√©ralement plus faibles
    recovery_data = {
        'SDATE': dates.strftime('%Y-%m-%d').tolist(),
        'INTERVAL': [1] * len(dates),
        '50': np.random.poisson(4, len(dates)),
        '100': np.random.poisson(2, len(dates)),
        '200': np.random.poisson(1, len(dates)),
        '500': np.random.poisson(0.5, len(dates)),
        '1000': np.random.poisson(0.2, len(dates))
    }
    
    lending_df = pd.DataFrame(lending_data)
    recovery_df = pd.DataFrame(recovery_data)
    
    print(f"‚úÖ Donn√©es r√©alistes cr√©√©es:")
    print(f"   P√©riode: {dates[0].strftime('%Y-%m-%d')} √† {dates[-1].strftime('%Y-%m-%d')}")
    print(f"   Lending: {lending_df.shape}")
    print(f"   Recovery: {recovery_df.shape}")
    
    return lending_df, recovery_df

def demonstrate_cash_flow():
    """D√©montre le calcul du flux de tr√©sorerie"""
    print("\nüí∞ D√©monstration du calcul du flux de tr√©sorerie...")
    
    lending_df, recovery_df = create_realistic_data()
    
    # Pr√©traiter les donn√©es
    lending_processed, recovery_processed = load_and_preprocess_data(lending_df, recovery_df)
    
    # Calculer le flux de tr√©sorerie
    cash_flow = calculate_cash_flow(lending_processed, recovery_processed)
    
    print(f"‚úÖ Flux de tr√©sorerie calcul√©:")
    print(f"   Nombre de transactions: {len(cash_flow)}")
    print(f"   Emprunts totaux: {cash_flow['total_lending'].sum():,.2f} XAF")
    print(f"   Remboursements totaux: {cash_flow['total_recovery'].sum():,.2f} XAF")
    print(f"   Flux net total: {cash_flow['net_flow'].sum():,.2f} XAF")
    print(f"   Valeur cumulative finale: {cash_flow['cumulative_flow'].iloc[-1]:,.2f} XAF")
    
    # Afficher les premi√®res lignes
    print(f"\nüìä Premi√®res lignes du flux de tr√©sorerie:")
    print(cash_flow.head())
    
    return cash_flow

def demonstrate_simulations():
    """D√©montre la g√©n√©ration des simulations"""
    print("\nüé≤ D√©monstration de la g√©n√©ration des simulations...")
    
    lending_df, recovery_df = create_realistic_data()
    lending_processed, recovery_processed = load_and_preprocess_data(lending_df, recovery_df)
    
    # G√©n√©rer des simulations
    n_simulations = 10
    print(f"   G√©n√©ration de {n_simulations} simulations Monte Carlo...")
    
    simulated_lending_list, simulated_recovery_list = generate_simulations_avance(
        lending_processed, recovery_processed, n_simulations, 'montecarlo'
    )
    
    print(f"‚úÖ Simulations g√©n√©r√©es:")
    print(f"   Nombre de simulations: {len(simulated_lending_list)}")
    print(f"   Structure lending: {simulated_lending_list[0].shape}")
    print(f"   Structure recovery: {simulated_recovery_list[0].shape}")
    
    # Calculer les trajectoires simul√©es
    simulated_flows = []
    for i in range(len(simulated_lending_list)):
        sim_flow = calculate_cash_flow(simulated_lending_list[i], simulated_recovery_list[i])
        simulated_flows.append(sim_flow)
    
    # Statistiques des simulations
    final_values = [flow['cumulative_flow'].iloc[-1] for flow in simulated_flows]
    print(f"\nüìà Statistiques des simulations:")
    print(f"   Valeur finale moyenne: {np.mean(final_values):,.2f} XAF")
    print(f"   √âcart-type: {np.std(final_values):,.2f} XAF")
    print(f"   Min: {np.min(final_values):,.2f} XAF")
    print(f"   Max: {np.max(final_values):,.2f} XAF")
    
    return simulated_lending_list, simulated_recovery_list

def demonstrate_plotting():
    """D√©montre la g√©n√©ration des graphiques"""
    print("\nüìä D√©monstration de la g√©n√©ration des graphiques...")
    
    lending_df, recovery_df = create_realistic_data()
    
    # G√©n√©rer le graphique des trajectoires
    print("   G√©n√©ration du graphique des trajectoires...")
    result = generate_trajectory_plot(
        lending_df=lending_df,
        recovery_df=recovery_df,
        method='montecarlo',
        num_trajectories=15
    )
    
    print(f"‚úÖ Graphique g√©n√©r√©:")
    print(f"   Succ√®s: {result['success']}")
    print(f"   Taille image: {len(result['image_base64'])} caract√®res")
    
    if result['stats']:
        print(f"\nüìà Statistiques du graphique:")
        print(f"   Valeur finale originale: {result['stats']['original_final_value']:,.2f} XAF")
        print(f"   Moyenne simul√©e: {result['stats']['simulated_mean']:,.2f} XAF")
        print(f"   √âcart-type: {result['stats']['simulated_std']:,.2f} XAF")
        print(f"   IC 95%: [{result['stats']['simulated_ci_95'][0]:,.2f}, {result['stats']['simulated_ci_95'][1]:,.2f}] XAF")
        print(f"   Nombre de transactions: {result['stats']['num_transactions']}")
        print(f"   Nombre de simulations: {result['stats']['num_simulations']}")
    
    return result

def demonstrate_comparison():
    """D√©montre la comparaison entre Monte Carlo et Bootstrap"""
    print("\nüîÑ D√©monstration de la comparaison Monte Carlo vs Bootstrap...")
    
    lending_df, recovery_df = create_realistic_data()
    
    # Monte Carlo
    print("   G√©n√©ration Monte Carlo...")
    mc_result = generate_trajectory_plot(
        lending_df=lending_df,
        recovery_df=recovery_df,
        method='montecarlo',
        num_trajectories=10
    )
    
    # Bootstrap
    print("   G√©n√©ration Bootstrap...")
    bs_result = generate_trajectory_plot(
        lending_df=lending_df,
        recovery_df=recovery_df,
        method='bootstrap',
        num_trajectories=10
    )
    
    print(f"\nüìä Comparaison des m√©thodes:")
    print(f"   Monte Carlo:")
    print(f"     Succ√®s: {mc_result['success']}")
    print(f"     Moyenne: {mc_result['stats']['simulated_mean']:,.2f} XAF")
    print(f"     √âcart-type: {mc_result['stats']['simulated_std']:,.2f} XAF")
    
    print(f"   Bootstrap:")
    print(f"     Succ√®s: {bs_result['success']}")
    print(f"     Moyenne: {bs_result['stats']['simulated_mean']:,.2f} XAF")
    print(f"     √âcart-type: {bs_result['stats']['simulated_std']:,.2f} XAF")
    
    return mc_result, bs_result

def main():
    """Fonction principale de d√©monstration"""
    print("üöÄ D√©monstration du Trac√© des Trajectoires des Montants Cumul√©s")
    print("=" * 70)
    
    try:
        # D√©monstration 1: Calcul du flux de tr√©sorerie
        cash_flow = demonstrate_cash_flow()
        
        # D√©monstration 2: G√©n√©ration des simulations
        simulated_lending, simulated_recovery = demonstrate_simulations()
        
        # D√©monstration 3: G√©n√©ration des graphiques
        plot_result = demonstrate_plotting()
        
        # D√©monstration 4: Comparaison des m√©thodes
        mc_result, bs_result = demonstrate_comparison()
        
        print("\nüéâ D√©monstration termin√©e avec succ√®s!")
        print("‚úÖ Toutes les fonctionnalit√©s sont op√©rationnelles")
        print("\nüìù Prochaines √©tapes:")
        print("   1. Lancer l'application web (backend + frontend)")
        print("   2. Uploader des fichiers CSV r√©els")
        print("   3. Lancer une simulation")
        print("   4. Visualiser les trajectoires dans l'interface")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors de la d√©monstration: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
